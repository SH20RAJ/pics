/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/E0ZnHgwsdUI
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Separator } from "@/components/ui/separator"

export function Packages() {
  const [view, setView] = useState("grid")
  const [selectedItem, setSelectedItem] = useState(null)
  const files = [
    {
      id: 1,
      name: "Family Photos",
      type: "folder",
      size: "2.3 GB",
      modified: "2023-05-15",
      thumbnail: "/placeholder.svg",
    },
    {
      id: 2,
      name: "Work Documents",
      type: "folder",
      size: "5.1 GB",
      modified: "2023-04-20",
      thumbnail: "/placeholder.svg",
    },
    {
      id: 3,
      name: "Vacation 2022.jpg",
      type: "image",
      size: "2.1 MB",
      modified: "2022-08-12",
      thumbnail: "/placeholder.svg",
    },
    {
      id: 4,
      name: "Presentation.pptx",
      type: "document",
      size: "4.5 MB",
      modified: "2023-03-01",
      thumbnail: "/placeholder.svg",
    },
    {
      id: 5,
      name: "Budget Spreadsheet.xlsx",
      type: "spreadsheet",
      size: "1.2 MB",
      modified: "2023-06-30",
      thumbnail: "/placeholder.svg",
    },
  ]
  const handleView = (newView) => {
    setView(newView)
  }
  const handleItemClick = (item) => {
    setSelectedItem(item)
  }
  const handleDelete = (item) => {
    console.log(`Deleting ${item.name}`)
  }
  const handleUpload = () => {
    console.log("Uploading file")
  }
  const handleCreateFolder = () => {
    console.log("Creating new folder")
  }
  return (
    (<div className="flex flex-col h-screen">
      <header
        className="bg-background border-b px-4 py-2 flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link
            href="#"
            className="flex items-center gap-2 font-semibold"
            prefetch={false}>
            <HardDriveIcon className="w-6 h-6 text-primary" />
            Google Drive
          </Link>
          <div className="flex items-center gap-2">
            <Button
              variant={view === "grid" ? "secondary" : "outline"}
              size="icon"
              onClick={() => handleView("grid")}>
              <LayoutGridIcon className="w-5 h-5" />
            </Button>
            <Button
              variant={view === "list" ? "secondary" : "outline"}
              size="icon"
              onClick={() => handleView("list")}>
              <ListIcon className="w-5 h-5" />
            </Button>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={handleUpload}>
            <UploadIcon className="w-5 h-5 mr-2" />
            Upload
          </Button>
          <Button variant="outline" onClick={handleCreateFolder}>
            <FolderPlusIcon className="w-5 h-5 mr-2" />
            New Folder
          </Button>
        </div>
      </header>
      <main className="flex-1 overflow-auto">
        {view === "grid" ? (
          <div className="grid grid-cols-4 gap-4 p-4">
            {files.map((file) => (
              <div
                key={file.id}
                className="bg-background rounded-lg overflow-hidden cursor-pointer group"
                onClick={() => handleItemClick(file)}>
                <div className="relative">
                  <img
                    src="/placeholder.svg"
                    alt={file.name}
                    width={200}
                    height={150}
                    className="w-full h-[150px] object-cover group-hover:opacity-50 transition-opacity" />
                  {file.type === "folder" && (
                    <div
                      className="absolute inset-0 flex items-center justify-center bg-black/50 group-hover:opacity-100 transition-opacity">
                      <FolderIcon className="w-10 h-10 text-white" />
                    </div>
                  )}
                </div>
                <div className="p-2">
                  <div className="font-medium line-clamp-1">{file.name}</div>
                  <div className="text-xs text-muted-foreground line-clamp-1">
                    {file.size} - {file.modified}
                  </div>
                  <div className="mt-2 flex justify-end gap-2">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={(e) => {
                        e.stopPropagation()
                        handleDelete(file)
                      }}>
                      <TrashIcon className="w-5 h-5" />
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="p-4">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Size</TableHead>
                  <TableHead>Modified</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {files.map((file) => (
                  <TableRow
                    key={file.id}
                    className="cursor-pointer hover:bg-muted"
                    onClick={() => handleItemClick(file)}>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        {file.type === "folder" ? (
                          <FolderIcon className="w-5 h-5 text-primary" />
                        ) : (
                          <FileTypeIcon className="w-5 h-5 text-primary" />
                        )}
                        <div className="font-medium line-clamp-1">{file.name}</div>
                      </div>
                    </TableCell>
                    <TableCell>{file.type}</TableCell>
                    <TableCell>{file.size}</TableCell>
                    <TableCell>{file.modified}</TableCell>
                    <TableCell className="text-right">
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={(e) => {
                          e.stopPropagation()
                          handleDelete(file)
                        }}>
                        <TrashIcon className="w-5 h-5" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </main>
      {selectedItem && (
        <div
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-background rounded-lg p-6 max-w-[600px] w-full">
            <div className="flex items-start gap-4">
              <div className="flex-1">
                {selectedItem.type === "image" ? (
                  <img
                    src="/placeholder.svg"
                    alt={selectedItem.name}
                    width={400}
                    height={300}
                    className="w-full h-[300px] object-contain" />
                ) : (
                  <div
                    className="bg-muted rounded-lg p-4 flex items-center justify-center h-[300px]">
                    <TypeIcon className="w-20 h-20 text-muted-foreground" />
                  </div>
                )}
              </div>
              <div className="grid gap-2">
                <div className="font-medium text-xl">{selectedItem.name}</div>
                <div className="text-sm text-muted-foreground">
                  {selectedItem.size} - {selectedItem.modified}
                </div>
                <Separator />
                <div className="grid gap-2">
                  <div className="font-medium">Actions</div>
                  <div className="flex gap-2">
                    <Button variant="outline">Open</Button>
                    <Button
                      variant="outline"
                      onClick={(e) => {
                        e.stopPropagation()
                        handleDelete(selectedItem)
                      }}>
                      Delete
                    </Button>
                  </div>
                </div>
              </div>
            </div>
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-2 right-2"
              onClick={() => setSelectedItem(null)}>
              <XIcon className="w-5 h-5" />
            </Button>
          </div>
        </div>
      )}
    </div>)
  );
}

function FileTypeIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M9 13v-1h6v1" />
      <path d="M12 12v6" />
      <path d="M11 18h2" />
    </svg>)
  );
}


function FolderIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path
        d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" />
    </svg>)
  );
}


function FolderPlusIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M12 10v6" />
      <path d="M9 13h6" />
      <path
        d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" />
    </svg>)
  );
}


function HardDriveIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="22" x2="2" y1="12" y2="12" />
      <path
        d="M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z" />
      <line x1="6" x2="6.01" y1="16" y2="16" />
      <line x1="10" x2="10.01" y1="16" y2="16" />
    </svg>)
  );
}


function LayoutGridIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <rect width="7" height="7" x="3" y="3" rx="1" />
      <rect width="7" height="7" x="14" y="3" rx="1" />
      <rect width="7" height="7" x="14" y="14" rx="1" />
      <rect width="7" height="7" x="3" y="14" rx="1" />
    </svg>)
  );
}


function ListIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="8" x2="21" y1="6" y2="6" />
      <line x1="8" x2="21" y1="12" y2="12" />
      <line x1="8" x2="21" y1="18" y2="18" />
      <line x1="3" x2="3.01" y1="6" y2="6" />
      <line x1="3" x2="3.01" y1="12" y2="12" />
      <line x1="3" x2="3.01" y1="18" y2="18" />
    </svg>)
  );
}


function TrashIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>)
  );
}


function TypeIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polyline points="4 7 4 4 20 4 20 7" />
      <line x1="9" x2="15" y1="20" y2="20" />
      <line x1="12" x2="12" y1="4" y2="20" />
    </svg>)
  );
}


function UploadIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" x2="12" y1="3" y2="15" />
    </svg>)
  );
}


function XIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>)
  );
}
