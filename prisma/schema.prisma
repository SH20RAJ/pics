generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  username       String           @unique @default(cuid())
  password       String?
  image          String?
  apiKeys        ApiKey[]
  images         Image[]
  quota          Int              @default(10000)
  emailVerified  DateTime?
  accounts       Account[]
  userQuota      UserImageQuota[]
  sessions       Session[]
  authenticators Authenticator[]
  folders        Folder[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique @default(uuid())
  name        String   @default("Untitled API Key")
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        Int        @id @default(autoincrement())
  idHash    String     @unique @default(cuid())
  filename  String?
  url       String
  path      String
  userId    String
  tagdata   String?
  user      User       @relation(fields: [userId], references: [id])
  folderId  Int?
  folder    Folder?    @relation(fields: [folderId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tags      ImageTag[]
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  images    ImageTag[]
}

model ImageTag {
  id        Int      @id @default(autoincrement())
  imageId   Int
  tagId     Int
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([imageId, tagId])
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  parentId  Int?
  parent    Folder?  @relation("SubFolders", fields: [parentId], references: [id])
  children  Folder[] @relation("SubFolders")
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
}

model UserImageQuota {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  imageCount Int      @default(0)
  quota      Int      @default(10000) // Default free quota is 10,000 images
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
